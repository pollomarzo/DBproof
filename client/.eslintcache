[{"/home/youflixdb/DBproof/client/src/index.jsx":"1","/home/youflixdb/DBproof/client/src/App.jsx":"2","/home/youflixdb/DBproof/client/src/Main.jsx":"3","/home/youflixdb/DBproof/client/src/screens/index.js":"4","/home/youflixdb/DBproof/client/src/screens/Feedback.jsx":"5","/home/youflixdb/DBproof/client/src/screens/Watch.jsx":"6","/home/youflixdb/DBproof/client/src/screens/Playlist.jsx":"7","/home/youflixdb/DBproof/client/src/screens/Item.jsx":"8","/home/youflixdb/DBproof/client/src/screens/Cast.jsx":"9","/home/youflixdb/DBproof/client/src/screens/Account.jsx":"10","/home/youflixdb/DBproof/client/src/constants.js":"11","/home/youflixdb/DBproof/client/src/tables/ItemTable.jsx":"12","/home/youflixdb/DBproof/client/src/tables/ProfileTable.jsx":"13","/home/youflixdb/DBproof/client/src/tables/WatchTable.jsx":"14","/home/youflixdb/DBproof/client/src/PageGrid.jsx":"15","/home/youflixdb/DBproof/client/src/tables/AccountTable.jsx":"16","/home/youflixdb/DBproof/client/src/tables/CastTable.jsx":"17","/home/youflixdb/DBproof/client/src/tables/PlaylistTable.jsx":"18","/home/youflixdb/DBproof/client/src/tables/FeedbackTable.jsx":"19"},{"size":198,"mtime":1611679998914,"results":"20","hashOfConfig":"21"},{"size":600,"mtime":1611679998914,"results":"22","hashOfConfig":"21"},{"size":1700,"mtime":1611679998914,"results":"23","hashOfConfig":"21"},{"size":276,"mtime":1611679998918,"results":"24","hashOfConfig":"21"},{"size":6431,"mtime":1611681809691,"results":"25","hashOfConfig":"21"},{"size":4042,"mtime":1611681809691,"results":"26","hashOfConfig":"21"},{"size":4894,"mtime":1611681809691,"results":"27","hashOfConfig":"21"},{"size":7661,"mtime":1611681809691,"results":"28","hashOfConfig":"21"},{"size":4438,"mtime":1611681809691,"results":"29","hashOfConfig":"21"},{"size":9658,"mtime":1611681809691,"results":"30","hashOfConfig":"21"},{"size":444,"mtime":1611683276422,"results":"31","hashOfConfig":"21"},{"size":1011,"mtime":1611679998918,"results":"32","hashOfConfig":"21"},{"size":850,"mtime":1611679998918,"results":"33","hashOfConfig":"21"},{"size":821,"mtime":1611679998918,"results":"34","hashOfConfig":"21"},{"size":1309,"mtime":1611681809691,"results":"35","hashOfConfig":"21"},{"size":1892,"mtime":1611679998918,"results":"36","hashOfConfig":"21"},{"size":941,"mtime":1611679998918,"results":"37","hashOfConfig":"21"},{"size":942,"mtime":1611679998918,"results":"38","hashOfConfig":"21"},{"size":1342,"mtime":1611679998918,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"djl7bp",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/youflixdb/DBproof/client/src/index.jsx",[],["88","89"],"/home/youflixdb/DBproof/client/src/App.jsx",[],"/home/youflixdb/DBproof/client/src/Main.jsx",["90"],"import { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Container, Tabs, Tab, Typography } from '@material-ui/core';\n\nimport { Account, Cast, Feedback, Item, Playlist, Watch } from './screens';\n\nconst TabPanel = ({ children, value, index, ...other }) => {\n  return (\n    <div hidden={value !== index} {...other}>\n      {value === index && <Container>{children}</Container>}\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nconst Main = () => {\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (_, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange}>\n          <Tab label=\"Account\" /> {/* account, profilo, carta, paypal */}\n          <Tab label=\"Cast\" /> {/* membro del cast */}\n          <Tab label=\"Contenuto\" /> {/* contenuto, episodio, saga */}\n          <Tab label=\"Opinione\" /> {/* opinione */}\n          <Tab label=\"Playlist\" /> {/* playlist */}\n          <Tab label=\"Guarda\" />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <Account />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Cast />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Item />\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <Feedback />\n      </TabPanel>\n      <TabPanel value={value} index={4}>\n        <Playlist />\n      </TabPanel>\n      <TabPanel value={value} index={5}>\n        <Watch />\n      </TabPanel>\n    </div>\n  );\n};\n\nexport default Main;\n","/home/youflixdb/DBproof/client/src/screens/index.js",[],"/home/youflixdb/DBproof/client/src/screens/Feedback.jsx",["91"],"import { useState, useMemo } from 'react';\nimport {\n  Select,\n  MenuItem,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  InputLabel,\n  FormControl,\n  Radio,\n  FormControlLabel,\n  FormLabel,\n  TextField,\n  Slider,\n  RadioGroup,\n} from '@material-ui/core';\nimport { useForm } from 'react-hook-form';\nimport useFetch from 'react-fetch-hook';\n\nimport { ITEM_URL, PROFILE_URL, FEEDBACK_URL } from '../constants';\nimport PageGrid from '../PageGrid';\nimport ItemTable from '../tables/ItemTable';\nimport ProfileTable from '../tables/ProfileTable';\nimport FeedbackTable from '../tables/FeedbackTable';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    background: theme.palette.background.default,\n    display: 'flex',\n    '& > *': {\n      width: '50%',\n    },\n  },\n  paper: {\n    padding: theme.spacing(3),\n  },\n  header: {\n    '& > :first-child': {\n      marginBottom: theme.spacing(1),\n    },\n    '& > :last-child': {\n      marginBottom: theme.spacing(3),\n    },\n  },\n  inputs: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& > *': {\n      width: '100%',\n      marginBottom: theme.spacing(4),\n    },\n  },\n  btnWrapper: {\n    textAlign: 'right',\n  },\n  inputsRow: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(2),\n    '& > *': {\n      flex: '0 1 48%',\n    },\n  },\n}));\n\n/**\n * - insert new feedback:\n *   - tipo\n *   - punteggio/testo\n *   - profilo\n *   - contenuto\n *   - punteggio del coso\n */\n\nconst Feedback = () => {\n  const classes = useStyles();\n\n  // profile, item\n  const [profile, setProfile] = useState('');\n  const [item, setItem] = useState('');\n\n  // radio value\n  const [type, setType] = useState('rating');\n\n  // rating and comment\n  const [rating, setRating] = useState(3);\n  const [comment, setComment] = useState('');\n\n  // initial data fetching\n  const { data: items, isLoading: isLoadingItems } = useFetch(ITEM_URL);\n  const { data: profiles, isLoading: isLoadingProfiles } = useFetch(\n    PROFILE_URL\n  );\n\n  // result obtained from database query\n  const [result, setResult] = useState([]);\n\n  const isLoading = isLoadingItems || isLoadingProfiles;\n\n  const submitBody = useMemo(\n    () =>\n      type === 'rating'\n        ? {\n            profilo: profile,\n            contenuto: item,\n            punteggio: rating,\n          }\n        : {\n            profilo: profile,\n            contenuto: item,\n            commento: comment,\n          },\n    [profile, item, rating, comment, type]\n  );\n\n  const onSubmit = async (_) => {\n    try {\n      const resData = await fetch(FEEDBACK_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(submitBody),\n      }).then((res) => res.json());\n      setResult(resData);\n      console.log(resData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <PageGrid>\n      <Paper className={classes.paper}>\n        <Typography variant=\"subtitle1\">\n          Insert new rating on content\n        </Typography>\n        <div className={classes.inputsRow}>\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"profile-label\">Profilo</InputLabel>\n            <Select\n              labelId=\"profile-label\"\n              value={profile}\n              onChange={(e) => setProfile(e.target.value)}\n            >\n              {profiles.map((profile) => (\n                <MenuItem\n                  key={`${profile.codice_account}_${profile.numero}`}\n                  value={profile}\n                >\n                  {profile.nickname}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"item-label\">Contenuto</InputLabel>\n            <Select\n              variant=\"filled\"\n              labelId=\"item-label\"\n              value={item}\n              onChange={(e) => setItem(e.target.value)}\n            >\n              {items.map((item) => (\n                <MenuItem key={item.codice} value={item}>\n                  {item.nome}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Tipo di Opinione</FormLabel>\n          <RadioGroup\n            aria-label=\"feedback_type\"\n            name=\"type\"\n            value={type}\n            onChange={(e) => setType(e.target.value)}\n          >\n            <FormControlLabel value=\"rating\" control={<Radio />} label=\"Voto\" />\n            <FormControlLabel\n              value=\"comment\"\n              control={<Radio />}\n              label=\"Commento\"\n            />\n          </RadioGroup>\n        </FormControl>\n        {/** will keep rating and comment cleanly apart for clarity. confirm button is NOT shared */}\n        {/**RATING SECTION */}\n        {type === 'rating' && (\n          <>\n            <div>\n              <Slider\n                value={rating}\n                onChange={(_, newValue) => setRating(newValue)}\n                step={1}\n                marks\n                min={0}\n                max={5}\n              />\n            </div>\n            <Button\n              onClick={onSubmit}\n              disabled={profile === '' || item === '' || rating === ''}\n            >\n              Confirm\n            </Button>\n          </>\n        )}\n        {/**COMMENT SECTION */}\n        {type === 'comment' && (\n          <>\n            <div>\n              <TextField\n                variant=\"filled\"\n                id=\"comment_box\"\n                label=\"Commento\"\n                multiline\n                value={comment}\n                onChange={(e) =>\n                  e.target.value.length <= 200 && setComment(e.target.value)\n                }\n                error={comment.length === 200}\n                helperText={comment.length === 200 && 'Commento troppo lungo'}\n              />\n            </div>\n            <Button\n              onClick={onSubmit}\n              disabled={profile === '' || item === '' || comment === ''}\n            >\n              Confirm\n            </Button>\n          </>\n        )}\n      </Paper>\n      <FeedbackTable feedbacks={result} />\n      <ProfileTable profiles={profiles} />\n      <ItemTable items={items} />\n    </PageGrid>\n  );\n};\n\nexport default Feedback;\n","/home/youflixdb/DBproof/client/src/screens/Watch.jsx",["92"],"import { useState } from 'react';\nimport {\n  MenuItem,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  Select,\n  InputLabel,\n  FormControl,\n  Grid,\n} from '@material-ui/core';\nimport useFetch from 'react-fetch-hook';\n\nimport { WATCH_URL, ITEM_URL, PROFILE_URL } from '../constants';\nimport WatchTable from '../tables/WatchTable';\nimport ProfileTable from '../tables/ProfileTable';\nimport ItemTable from '../tables/ItemTable';\nimport PageGrid from '../PageGrid';\n\n/**\n * - insert new rel\n *   - profilo, contenuto\n */\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    background: theme.palette.background.default,\n    display: 'flex',\n    '& > *': {\n      width: '50%',\n    },\n  },\n  gridCell: {\n    padding: theme.spacing(3),\n  },\n  paper: {\n    padding: theme.spacing(3),\n  },\n  header: {\n    '& > :first-child': {\n      marginBottom: theme.spacing(1),\n    },\n    '& > :last-child': {\n      marginBottom: theme.spacing(3),\n    },\n  },\n  inputs: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& > *': {\n      width: '100%',\n      marginBottom: theme.spacing(4),\n    },\n  },\n  btnWrapper: {\n    textAlign: 'right',\n  },\n}));\n\nconst Watch = () => {\n  const classes = useStyles();\n\n  // selects and their contents, plus playlist name\n  const [profile, setProfile] = useState('');\n  const [item, setItem] = useState('');\n\n  const { data: items, isLoading: isLoadingItems } = useFetch(ITEM_URL);\n  const { data: profiles, isLoading: isLoadingProfiles } = useFetch(\n    PROFILE_URL\n  );\n\n  // result obtained from database query\n  const [result, setResult] = useState([]);\n\n  const isLoading = isLoadingItems || isLoadingProfiles;\n\n  const onSubmit = async () => {\n    try {\n      const resData = await fetch(WATCH_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          profilo: profile.numero,\n          account: profile.codice_account,\n          contenuto: item.codice,\n        }),\n      }).then((res) => res.json());\n      setResult(resData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <PageGrid>\n      <Paper className={classes.paper}>\n        <div className={classes.header}>\n          <Typography variant=\"h4\">Watch Content</Typography>\n          <Typography variant=\"subtitle1\">\n            Enter new watched content for a profile\n          </Typography>\n        </div>\n        <div className={classes.inputs}>\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"profile-label\">Profilo</InputLabel>\n            <Select\n              labelid=\"profile-label\"\n              value={profile}\n              onChange={(e) => setProfile(e.target.value)}\n            >\n              {profiles.map((profile) => (\n                <MenuItem\n                  key={`${profile.codice_account}_${profile.numero}`}\n                  value={profile}\n                >\n                  {profile.nickname}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"item-label\">Contenuto</InputLabel>\n            <Select\n              labelId=\"item-label\"\n              value={item}\n              onChange={(e) => setItem(e.target.value)}\n            >\n              {items.map((item) => (\n                <MenuItem key={item.codice} value={item}>\n                  {item.nome}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className={classes.btnWrapper}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onSubmit}\n            disabled={profile === '' || item === ''}\n          >\n            Confirm\n          </Button>\n        </div>\n      </Paper>\n      <WatchTable watch={result} />\n      <ProfileTable profiles={profiles} />\n      <ItemTable items={items} />\n    </PageGrid>\n  );\n};\n\nexport default Watch;\n","/home/youflixdb/DBproof/client/src/screens/Playlist.jsx",["93","94"],"import { useState } from 'react';\nimport {\n  Select,\n  MenuItem,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  InputLabel,\n  FormControl,\n  TextField,\n} from '@material-ui/core';\nimport { useForm } from 'react-hook-form';\nimport useFetch from 'react-fetch-hook';\n\nimport { PLAYLIST_URL, ITEM_URL, PROFILE_URL } from '../constants';\nimport PageGrid from '../PageGrid';\nimport PlaylistTable from '../tables/PlaylistTable';\nimport ProfileTable from '../tables/ProfileTable';\nimport ItemTable from '../tables/ItemTable';\n\n/**\n * - insert new playlist:\n *   - nome, profilo\n *   - contenuti (add + lista)\n */\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    background: theme.palette.background.default,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  paper: {\n    padding: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  select: {\n    display: 'inline-block',\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    width: '50%',\n    '& > *': {\n      width: '100%',\n    },\n  },\n  inputsRow: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(2),\n    '& > *': {\n      flex: '0 1 48%',\n    },\n  },\n}));\n\nconst Playlist = () => {\n  const classes = useStyles();\n\n  // selects and their contents, plus playlist name\n  const [profile, setProfile] = useState('');\n  const [item, setItem] = useState('');\n  const [name, setName] = useState('');\n\n  // initial data fetching\n  const { data: playlists, isLoading: isLoadingPlaylists } = useFetch(\n    PLAYLIST_URL\n  );\n  const { data: items, isLoading: isLoadingItems } = useFetch(ITEM_URL);\n  const { data: profiles, isLoading: isLoadingProfiles } = useFetch(\n    PROFILE_URL\n  );\n\n  // list of contents selected for playlist\n  const [inList, setInList] = useState([]);\n\n  // result obtained from database query\n  const [result, setResult] = useState([]);\n\n  const isLoading = isLoadingPlaylists || isLoadingItems || isLoadingProfiles;\n\n  const onSubmit = async (_) => {\n    try {\n      const resData = await fetch(PLAYLIST_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          nome: name,\n          profilo: profile,\n          account: profile.codice_account,\n          contenuti: inList,\n        }),\n      }).then((res) => res.json());\n      setResult(resData);\n      console.log(resData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <PageGrid>\n      <Paper className={classes.paper}>\n        <Typography variant=\"subtitle1\">\n          Insert new playlist with related content\n        </Typography>\n        <div className={classes.inputsRow}>\n          <TextField\n            variant=\"filled\"\n            label=\"Nome playlist\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"profile-label\">Profilo</InputLabel>\n            <Select\n              labelId=\"profile-label\"\n              value={profile}\n              onChange={(e) => setProfile(e.target.value)}\n            >\n              {profiles.map((profile) => (\n                <MenuItem\n                  key={`${profile.codice_account}_${profile.numero}`}\n                  value={profile}\n                >\n                  {profile.nickname}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className={classes.inputsRow}>\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"item-label\">Contenuto</InputLabel>\n            <Select\n              labelId=\"item-label\"\n              value={item}\n              onChange={(e) => setItem(e.target.value)}\n            >\n              {items.map((item) => (\n                <MenuItem key={item.codice} value={item}>\n                  {item.nome}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <Button\n          variant=\"contained\"\n          onClick={() => setInList([...inList, item])}\n          disabled={\n            item === '' ||\n            !!inList.find((content) => item.codice === content.codice)\n          }\n        >\n          Aggiungi contenuto\n        </Button>\n        <Typography variant=\"body2\">Currently in list: </Typography>\n        {inList.map((item) => (\n          <div key={item.codice}>{item.nome}</div>\n        ))}\n        <Button\n          onClick={onSubmit}\n          disabled={profile === '' || name === '' || inList.length === 0}\n        >\n          Confirm\n        </Button>\n      </Paper>\n      <PlaylistTable playlists={result} />\n      <ProfileTable profiles={profiles} />\n      <ItemTable items={items} />\n    </PageGrid>\n  );\n};\n\nexport default Playlist;\n","/home/youflixdb/DBproof/client/src/screens/Item.jsx",["95","96","97","98"],"import { useState, useMemo } from 'react';\nimport {\n  Select,\n  MenuItem,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  InputLabel,\n  FormControl,\n  TextField,\n} from '@material-ui/core';\nimport { useForm } from 'react-hook-form';\nimport useFetch from 'react-fetch-hook';\n\nimport { ITEM_URL } from '../constants';\nimport PageGrid from '../PageGrid';\nimport PlaylistTable from '../tables/PlaylistTable';\nimport ProfileTable from '../tables/ProfileTable';\nimport ItemTable from '../tables/ItemTable';\n\n/**\n * - insert item\n *   - nome, anno, descrizione, tipo\n *   - se serie, episodi:\n *     - stagione, nome, descrizione\n *   - se saga:\n *     - quali contenuti (add + lista)\n */\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    background: theme.palette.background.default,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  paper: {\n    padding: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  select: {\n    display: 'inline-block',\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    width: '50%',\n    '& > *': {\n      width: '100%',\n    },\n  },\n  inputsRow: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(2),\n    '& > *': {\n      flex: '0 1 48%',\n    },\n  },\n}));\n\nconst Item = () => {\n  const classes = useStyles();\n\n  // content type-agnostic data\n  const [name, setName] = useState('');\n  const [year, setYear] = useState('');\n  const [description, setDescription] = useState('');\n\n  // kind select\n  const [kind, setKind] = useState('film');\n  const kinds = ['film', 'serie TV', 'saga'];\n\n  // TV series episodes\n  const [episodes, setEpisodes] = useState([]);\n  const [number, setNumber] = useState('');\n  const [season, setSeason] = useState('');\n  const [episodeName, setEpisodeName] = useState('');\n  const [episodeDescription, setEpisodeDescription] = useState('');\n\n  // Saga\n  const [sagaItems, setSagaItems] = useState([]);\n  const [item, setItem] = useState({});\n\n  // result obtained from database query\n  const [result, setResult] = useState([]);\n\n  const { data: items, isLoading: isLoadingItems } = useFetch(ITEM_URL);\n\n  const submitBody = useMemo(\n    () => ({\n      contenuto: {\n        nome: name,\n        anno: year,\n        descrizione: description,\n        kind,\n      },\n      episodi: episodes,\n      saga: sagaItems,\n    }),\n    [name, year, description, kind, episodes, sagaItems]\n  );\n\n  const onSubmit = async () => {\n    try {\n      const resData = await fetch(ITEM_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(submitBody),\n      }).then((res) => res.json());\n      setResult(resData);\n      console.log(resData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const isLoading = isLoadingItems;\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <PageGrid>\n      <Paper className={classes.paper}>\n        <Typography variant=\"subtitle1\">\n          Insert new playlist with related content\n        </Typography>\n\n        {/** content properties */}\n        <div className={classes.inputsRow}>\n          <TextField\n            variant=\"filled\"\n            label=\"Nome contenuto\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n          <TextField\n            variant=\"filled\"\n            label=\"Anno contenuto\"\n            value={year}\n            onChange={(e) => setYear(e.target.value)}\n          />\n        </div>\n        <div className={classes.inputsRow}>\n          <TextField\n            variant=\"filled\"\n            label=\"Descrizione contenuto\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n        </div>\n\n        {/** kind select */}\n        <div style={{ marginBottom: 16 }}>\n          <FormControl variant=\"filled\" fullWidth>\n            <InputLabel id=\"kind-label\">Tipo</InputLabel>\n            <Select\n              labelId=\"kind-label\"\n              id=\"type\"\n              value={kind}\n              onChange={(e) => setKind(e.target.value)}\n            >\n              {kinds.map((kind, idx) => (\n                <MenuItem key={idx} value={kind}>\n                  {kind}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/** TV series */}\n        {kind === 'serie TV' && (\n          <div>\n            <div className={classes.inputsRow}>\n              <TextField\n                variant=\"filled\"\n                label=\"Numero episodio\"\n                value={number}\n                onChange={(e) => setNumber(e.target.value)}\n              />\n              <TextField\n                variant=\"filled\"\n                label=\"Stagione\"\n                value={season}\n                onChange={(e) => setSeason(e.target.value)}\n              />\n            </div>\n            <div className={classes.inputsRow}>\n              <TextField\n                variant=\"filled\"\n                label=\"Nome episodio\"\n                value={episodeName}\n                onChange={(e) => setEpisodeName(e.target.value)}\n              />\n              <TextField\n                variant=\"filled\"\n                label=\"Descrizione episodio\"\n                value={episodeDescription}\n                onChange={(e) => setEpisodeDescription(e.target.value)}\n              />\n            </div>\n            <Button\n              onClick={() =>\n                setEpisodes([\n                  ...episodes,\n                  {\n                    numero: number,\n                    stagione: season,\n                    nome: episodeName,\n                    descrizione: episodeDescription,\n                  },\n                ])\n              }\n            >\n              Aggiungi episodio\n            </Button>\n            <Typography variant=\"body2\">Inclusi nella serie TV:</Typography>\n            {episodes.map((episode, idx) => (\n              <div key={idx}>{episode.nome}</div>\n            ))}\n          </div>\n        )}\n\n        {/** Saga */}\n        {kind === 'saga' && (\n          <>\n            <Typography variant=\"body2\" style={{ marginBottom: 16 }}>\n              Saga:{' '}\n            </Typography>\n            <FormControl\n              variant=\"filled\"\n              fullWidth\n              style={{ marginBottom: 16 }}\n            >\n              <InputLabel id=\"saga-item-label\">Contenuto</InputLabel>\n              <Select\n                labelId=\"saga-item-label\"\n                value={item}\n                onChange={(e) => setItem(e.target.value)}\n              >\n                {items.map((item) => (\n                  <MenuItem key={item.codice} value={item}>\n                    {item.nome}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Button\n              variant=\"contained\"\n              onClick={() => setSagaItems([...sagaItems, item])}\n              disabled={\n                item === '' ||\n                !!sagaItems.find((content) => item.codice === content.codice)\n              }\n              style={{ marginBottom: 16 }}\n            >\n              Aggiungi contenuto\n            </Button>\n            <Typography variant=\"body2\">Currently in list: </Typography>\n            {sagaItems.map((item) => (\n              <div key={item.codice}>{item.nome}</div>\n            ))}\n          </>\n        )}\n        <Button onClick={onSubmit} disabled={name === ''}>\n          Confirm\n        </Button>\n      </Paper>\n      <ItemTable items={items} />\n    </PageGrid>\n  );\n};\n\nexport default Item;\n","/home/youflixdb/DBproof/client/src/screens/Cast.jsx",["99","100"],"import { useState } from 'react';\nimport {\n  Select,\n  MenuItem,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  InputLabel,\n  FormControl,\n  TextField,\n} from '@material-ui/core';\nimport { DatePicker } from '@material-ui/pickers';\nimport { useForm } from 'react-hook-form';\nimport useFetch from 'react-fetch-hook';\nimport moment from 'moment';\n\nimport { CAST_URL, ITEM_URL } from '../constants';\nimport CastTable from '../tables/CastTable';\nimport ItemTable from '../tables/ItemTable';\nimport PageGrid from '../PageGrid';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    background: theme.palette.background.default,\n    display: 'flex',\n    '& > *': {\n      width: '50%',\n    },\n  },\n  paper: {\n    padding: theme.spacing(3),\n  },\n  header: {\n    '& > :first-child': {\n      marginBottom: theme.spacing(1),\n    },\n    '& > :last-child': {\n      marginBottom: theme.spacing(3),\n    },\n  },\n  inputs: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& > *': {\n      width: '100%',\n      marginBottom: theme.spacing(4),\n    },\n  },\n  btnWrapper: {\n    textAlign: 'right',\n  },\n  inputsRow: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(2),\n    '& > *': {\n      flex: '0 1 48%',\n    },\n  },\n}));\n\n/**\n * - insert cast member\n *   - nome, cognome, data nascita, ruolo\n *   - select for movie he was participated in\n */\n\nconst Cast = () => {\n  const classes = useStyles();\n\n  // name, last name, birth date, role\n  const [name, setName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [role, setRole] = useState('');\n  const [birth, setBirth] = useState(new Date());\n\n  // content\n  const [item, setItem] = useState('');\n\n  // initial data fetching\n  const { data: cast, isLoading: isLoadingCast } = useFetch(CAST_URL);\n  const { data: items, isLoading: isLoadingItems } = useFetch(ITEM_URL);\n\n  // result obtained from database query\n  const [result, setResult] = useState('');\n\n  const isLoading = isLoadingCast || isLoadingItems;\n\n  const onSubmit = async (_) => {\n    try {\n      const resData = await fetch(CAST_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          nome: name,\n          cognome: lastName,\n          nascita: moment(birth).format('YYYY/MM/DD'),\n          ruolo: role,\n          contenuto: item,\n        }),\n      }).then((res) => res.json());\n      setResult(resData);\n      console.log(resData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <PageGrid>\n      <Paper className={classes.paper}>\n        <Typography variant=\"subtitle1\">Insert actor/role</Typography>\n        <div className={classes.inputsRow}>\n          <TextField\n            variant=\"filled\"\n            label=\"Nome Attore\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n          <TextField\n            variant=\"filled\"\n            label=\"Cognome Attore\"\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n          />\n        </div>\n        <div className={classes.inputsRow}>\n          <DatePicker\n            label=\"Data di Nascita\"\n            inputVariant=\"filled\"\n            value={birth}\n            onChange={setBirth}\n          />\n        </div>\n        <div className={classes.inputsRow}>\n          <TextField\n            variant=\"filled\"\n            label=\"Ruolo\"\n            value={role}\n            onChange={(e) => setRole(e.target.value)}\n          />\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"item-label\">Contenuto</InputLabel>\n            <Select\n              variant=\"filled\"\n              labelId=\"item-label\"\n              value={item}\n              onChange={(e) => setItem(e.target.value)}\n            >\n              {items.map((item) => (\n                <MenuItem key={item.codice} value={item}>\n                  {item.nome}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <Button\n          onClick={onSubmit}\n          disabled={name === '' || lastName === '' || item === ''}\n        >\n          Confirm\n        </Button>\n      </Paper>\n      <CastTable castMembers={cast} />\n      <ItemTable items={items} />\n    </PageGrid>\n  );\n};\n\nexport default Cast;\n","/home/youflixdb/DBproof/client/src/screens/Account.jsx",["101","102"],"import { useState, useMemo } from 'react';\nimport {\n  Select,\n  MenuItem,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  InputLabel,\n  FormControl,\n  Radio,\n  FormControlLabel,\n  FormLabel,\n  TextField,\n  Slider,\n  RadioGroup,\n} from '@material-ui/core';\nimport moment from 'moment';\nimport { DatePicker } from '@material-ui/pickers';\n\nimport { ACCOUNT_URL } from '../constants';\nimport AccountTable from '../tables/AccountTable';\nimport PageGrid from '../PageGrid';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    background: theme.palette.background.default,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  paper: {\n    padding: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  select: {\n    display: 'inline-block',\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    width: '50%',\n    '& > *': {\n      width: '100%',\n    },\n  },\n  inputsRow: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(2),\n    '& > *': {\n      flex: '0 1 48%',\n    },\n  },\n}));\n\n/**\n * ops:\n * - insert new account: email, tipo_abb, nome, cognome, data nasc, tel, fatt_telefono, fatt_indirizzo, fatt_nome, fatt_cognome\n *   - profiles: nickname\n *   - payment method for account\n *     - insert new credit card (numero, nome, cognome, scadenza) or paypal (email, token generato a mano)\n */\n\nconst Account = () => {\n  const classes = useStyles();\n\n  // account info\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [level, setLevel] = useState('silver');\n  const levels = ['silver', 'gold', 'platinum'];\n  const [birth, setBirth] = useState(new Date());\n  const [phone, setPhone] = useState('');\n\n  // profiles and nicknames\n  const [profiles, setProfiles] = useState([]);\n  const [nickname, setNickname] = useState('');\n\n  // payment\n  const [payPhone, setPayPhone] = useState('');\n  const [payAddress, setPayAddress] = useState('');\n  const [payName, setPayName] = useState('');\n  const [payLastName, setPayLastName] = useState('');\n\n  // radio payment\n  const [payment, setPayment] = useState('paypal');\n\n  // credit card\n  const [cardName, setCardName] = useState('');\n  const [cardLastName, setCardLastName] = useState('');\n  const [cardNumber, setCardNumber] = useState('');\n  const [cardDate, setCardDate] = useState(new Date());\n  const [cvv, setCvv] = useState('');\n\n  // paypal\n  const [paypalEmail, setPaypalEmail] = useState('');\n\n  // result obtained from database query\n  const [result, setResult] = useState([]);\n\n  const submitBody = useMemo(\n    () => ({\n      account: {\n        email,\n        nome: name,\n        cognome: lastName,\n        abbonamento: level,\n        data_nascita: moment(birth).format('MM/YYYY'),\n        telefono: phone,\n        fatt_telefono: payPhone,\n        fatt_indirizzo: payAddress,\n        fatt_nome: payName,\n        fatt_cognome: payLastName,\n      },\n      profili: profiles,\n      pagamento: payment,\n      paypal: {\n        paypalEmail,\n      },\n      carta: {\n        nome: cardName,\n        cognome: cardLastName,\n        numero: cardNumber,\n        scadenza: cardDate,\n        cvv,\n      },\n    }),\n    [\n      cardDate,\n      cardLastName,\n      cardName,\n      cardNumber,\n      cvv,\n      email,\n      lastName,\n      level,\n      name,\n      payAddress,\n      payLastName,\n      payName,\n      payPhone,\n      payment,\n      paypalEmail,\n      phone,\n      profiles,\n    ]\n  );\n\n  const onSubmit = async () => {\n    try {\n      const resData = await fetch(ACCOUNT_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(submitBody),\n      }).then((res) => res.json());\n      setResult(resData);\n      console.log(resData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <PageGrid>\n      <Paper className={classes.paper}>\n        <Typography variant=\"subtitle1\">Insert new account</Typography>\n        <div className={classes.inputsRow}>\n          <TextField\n            variant=\"filled\"\n            label=\"Nome account\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n          <TextField\n            variant=\"filled\"\n            label=\"Cognome account\"\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n          />\n        </div>\n        <div className={classes.inputsRow}>\n          <TextField\n            variant=\"filled\"\n            label=\"Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <TextField\n            variant=\"filled\"\n            label=\"Numero di telefono\"\n            value={phone}\n            onChange={(e) => setPhone(e.target.value)}\n          />\n        </div>\n        <div className={classes.inputsRow}>\n          <FormControl variant=\"filled\">\n            <InputLabel id=\"level-label\">Livello</InputLabel>\n            <Select\n              labelId=\"level-label\"\n              value={level}\n              onChange={(e) => setLevel(e.target.value)}\n            >\n              {levels.map((level) => (\n                <MenuItem key={level} value={level}>\n                  {level}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <DatePicker\n            inputVariant=\"filled\"\n            label=\"Data di Nascita\"\n            value={birth}\n            onChange={setBirth}\n          />\n        </div>\n\n        {/** profiles and nicknames */}\n        <TextField\n          variant=\"filled\"\n          label=\"Nickname\"\n          value={nickname}\n          onChange={(e) => setNickname(e.target.value)}\n        />\n        <Button\n          onClick={() =>\n            setProfiles([\n              ...profiles,\n              {\n                numero: profiles.length,\n                nickname: nickname,\n              },\n            ])\n          }\n          disabled={profiles.length === 5}\n        >\n          Aggiungi profilo\n        </Button>\n        <div>\n          <Typography variant=\"body2\">\n            Current profiles in this account:\n          </Typography>\n          {profiles.map((prof, idx) => (\n            <div key={idx}>{prof.nickname}</div>\n          ))}\n\n          {/** payment */}\n          <div className={classes.inputsRow}>\n            <TextField\n              variant=\"filled\"\n              label=\"Telefono di fatturazione\"\n              value={payPhone}\n              onChange={(e) => setPayPhone(e.target.value)}\n            />\n            <TextField\n              variant=\"filled\"\n              label=\"Indirizzo di fatturazione\"\n              value={payAddress}\n              onChange={(e) => setPayAddress(e.target.value)}\n            />\n          </div>\n          <div className={classes.inputsRow}>\n            <TextField\n              variant=\"filled\"\n              label=\"Nome fatturazione\"\n              value={payName}\n              onChange={(e) => setPayName(e.target.value)}\n            />\n            <TextField\n              variant=\"filled\"\n              label=\"Cognome fatturazione\"\n              value={payLastName}\n              onChange={(e) => setPayLastName(e.target.value)}\n            />\n          </div>\n        </div>\n\n        {/** radio for selecting payment type */}\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Tipo di pagamento</FormLabel>\n          <RadioGroup\n            aria-label=\"payment_type\"\n            name=\"payment_type\"\n            value={payment}\n            onChange={(e) => setPayment(e.target.value)}\n          >\n            <FormControlLabel\n              value=\"paypal\"\n              control={<Radio />}\n              label=\"Paypal\"\n            />\n            <FormControlLabel\n              value=\"card\"\n              control={<Radio />}\n              label=\"Carta di credito\"\n            />\n          </RadioGroup>\n        </FormControl>\n\n        {/** card */}\n        {payment === 'card' && (\n          <>\n            <TextField\n              variant=\"filled\"\n              label=\"Nome sulla carta\"\n              value={cardName}\n              onChange={(e) => setCardName(e.target.value)}\n            />\n            <TextField\n              variant=\"filled\"\n              label=\"Cognome sulla carta\"\n              value={cardLastName}\n              onChange={(e) => setCardLastName(e.target.value)}\n            />\n            <TextField\n              variant=\"filled\"\n              label=\"Numero di carta\"\n              value={cardNumber}\n              onChange={(e) => setCardNumber(e.target.value)}\n            />\n            <DatePicker\n              inputVariant=\"filled\"\n              variant=\"inline\"\n              openTo=\"year\"\n              views={['year', 'month']}\n              label=\"Expiry date\"\n              value={cardDate}\n              onChange={setCardDate}\n            />\n            <TextField\n              variant=\"filled\"\n              label=\"CVV\"\n              value={cvv}\n              onChange={(e) => setCvv(e.target.value)}\n            />\n          </>\n        )}\n        {/** paypal */}\n        {payment === 'paypal' && (\n          <>\n            <TextField\n              variant=\"filled\"\n              label=\"Paypal Email\"\n              value={paypalEmail}\n              onChange={(e) => setPaypalEmail(e.target.value)}\n            />\n          </>\n        )}\n\n        <Button onClick={onSubmit} disabled={false}>\n          Confirm\n        </Button>\n      </Paper>\n      <AccountTable accounts={result} />\n    </PageGrid>\n  );\n};\n\nexport default Account;\n","/home/youflixdb/DBproof/client/src/constants.js",[],"/home/youflixdb/DBproof/client/src/tables/ItemTable.jsx",["103"],"import {\n  Paper,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableCell,\n  TableRow,\n  makeStyles,\n} from '@material-ui/core';\n\nconst ItemTable = ({ items }) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Codice</TableCell>\n            <TableCell>Nome</TableCell>\n            <TableCell>Anno</TableCell>\n            <TableCell>Descrizione</TableCell>\n            <TableCell>Tipo</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {items.map((item, index) => (\n            <TableRow key={index}>\n              <TableCell>{item.codice}</TableCell>\n              <TableCell>{item.nome}</TableCell>\n              <TableCell>{item.anno}</TableCell>\n              <TableCell>{item.descrizione}</TableCell>\n              <TableCell>{item.tipo}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default ItemTable;\n","/home/youflixdb/DBproof/client/src/tables/ProfileTable.jsx",[],"/home/youflixdb/DBproof/client/src/tables/WatchTable.jsx",[],"/home/youflixdb/DBproof/client/src/PageGrid.jsx",["104","105","106","107","108","109","110"],"import {\n  MenuItem,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  Select,\n  InputLabel,\n  FormControl,\n  Grid,\n} from '@material-ui/core';\n\n/**\n * - insert new rel\n *   - profilo, contenuto\n */\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    background: theme.palette.background.default,\n    display: 'flex',\n    '& > *': {\n      width: '50%',\n    },\n  },\n  gridMainContainer: {\n    width: '100%',\n  },\n  gridCell: {\n    padding: theme.spacing(3),\n  },\n}));\n\nconst groupBy = (groupSize, array) => {\n  const result = [];\n  let cursor = -1;\n  array.forEach((item, index) => {\n    if (index % groupSize === 0) {\n      result.push([]);\n      cursor++;\n    }\n\n    result[cursor].push(item);\n  });\n  return result;\n};\n\nconst PageGrid = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <Grid container className={classes.gridMainContainer}>\n        {groupBy(2, children).map(([first, second], index) => (\n          <Grid key={index} container>\n            <Grid item xs={6} className={classes.gridCell}>\n              {first}\n            </Grid>\n            <Grid item xs={6} className={classes.gridCell}>\n              {second}\n            </Grid>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default PageGrid;\n","/home/youflixdb/DBproof/client/src/tables/AccountTable.jsx",[],"/home/youflixdb/DBproof/client/src/tables/CastTable.jsx",[],"/home/youflixdb/DBproof/client/src/tables/PlaylistTable.jsx",[],"/home/youflixdb/DBproof/client/src/tables/FeedbackTable.jsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":3,"column":40,"nodeType":"117","messageId":"118","endLine":3,"endColumn":50},{"ruleId":"115","severity":1,"message":"119","line":18,"column":10,"nodeType":"117","messageId":"118","endLine":18,"endColumn":17},{"ruleId":"115","severity":1,"message":"120","line":11,"column":3,"nodeType":"117","messageId":"118","endLine":11,"endColumn":7},{"ruleId":"115","severity":1,"message":"119","line":13,"column":10,"nodeType":"117","messageId":"118","endLine":13,"endColumn":17},{"ruleId":"115","severity":1,"message":"121","line":67,"column":17,"nodeType":"117","messageId":"118","endLine":67,"endColumn":26},{"ruleId":"115","severity":1,"message":"119","line":13,"column":10,"nodeType":"117","messageId":"118","endLine":13,"endColumn":17},{"ruleId":"115","severity":1,"message":"122","line":18,"column":8,"nodeType":"117","messageId":"118","endLine":18,"endColumn":21},{"ruleId":"115","severity":1,"message":"123","line":19,"column":8,"nodeType":"117","messageId":"118","endLine":19,"endColumn":20},{"ruleId":"115","severity":1,"message":"124","line":85,"column":10,"nodeType":"117","messageId":"118","endLine":85,"endColumn":16},{"ruleId":"115","severity":1,"message":"119","line":14,"column":10,"nodeType":"117","messageId":"118","endLine":14,"endColumn":17},{"ruleId":"115","severity":1,"message":"124","line":87,"column":10,"nodeType":"117","messageId":"118","endLine":87,"endColumn":16},{"ruleId":"115","severity":1,"message":"125","line":15,"column":3,"nodeType":"117","messageId":"118","endLine":15,"endColumn":9},{"ruleId":"126","severity":1,"message":"127","line":128,"column":5,"nodeType":"128","endLine":146,"endColumn":6,"suggestions":"129"},{"ruleId":"115","severity":1,"message":"130","line":9,"column":3,"nodeType":"117","messageId":"118","endLine":9,"endColumn":13},{"ruleId":"115","severity":1,"message":"131","line":2,"column":3,"nodeType":"117","messageId":"118","endLine":2,"endColumn":11},{"ruleId":"115","severity":1,"message":"132","line":3,"column":3,"nodeType":"117","messageId":"118","endLine":3,"endColumn":8},{"ruleId":"115","severity":1,"message":"116","line":4,"column":3,"nodeType":"117","messageId":"118","endLine":4,"endColumn":13},{"ruleId":"115","severity":1,"message":"133","line":6,"column":3,"nodeType":"117","messageId":"118","endLine":6,"endColumn":9},{"ruleId":"115","severity":1,"message":"134","line":7,"column":3,"nodeType":"117","messageId":"118","endLine":7,"endColumn":9},{"ruleId":"115","severity":1,"message":"135","line":8,"column":3,"nodeType":"117","messageId":"118","endLine":8,"endColumn":13},{"ruleId":"115","severity":1,"message":"136","line":9,"column":3,"nodeType":"117","messageId":"118","endLine":9,"endColumn":14},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'useForm' is defined but never used.","'Grid' is defined but never used.","'playlists' is assigned a value but never used.","'PlaylistTable' is defined but never used.","'ProfileTable' is defined but never used.","'result' is assigned a value but never used.","'Slider' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'birth'. Either include it or remove the dependency array.","ArrayExpression",["139"],"'makeStyles' is defined but never used.","'MenuItem' is defined but never used.","'Paper' is defined but never used.","'Button' is defined but never used.","'Select' is defined but never used.","'InputLabel' is defined but never used.","'FormControl' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [birth, cardDate, cardLastName, cardName, cardNumber, cvv, email, lastName, level, name, payAddress, payLastName, payName, payPhone, payment, paypalEmail, phone, profiles]",{"range":"142","text":"143"},[3244,3517],"[birth, cardDate, cardLastName, cardName, cardNumber, cvv, email, lastName, level, name, payAddress, payLastName, payName, payPhone, payment, paypalEmail, phone, profiles]"]